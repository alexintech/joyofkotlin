import java.io.Serializable
import java.time.Instant

class Person constructor(name: String) {

    val name: String

    init {
        this.name = name
    }
}

class Person2 constructor(name: String) {

    val name: String = name
}

class Person3 constructor(val name: String) {

}

class Person4 (val name: String)

// Implementing interfaces
open class Person5(val name: String,
              val registered: Instant) : Serializable, Comparable<Person5> {
    override fun compareTo(other: Person5): Int {
        return name.compareTo(other.name);
    }
}

// Extending open class
class Member(name: String, registered: Instant) : Person5(name, registered)

// Instantiating a class
val person = Person5("Bob", Instant.now())

// Overloading property constructors
class Person6(val name: String, val registered: Instant = Instant.now())

// Override constructor in a more traditional way
class Person7(val name: String, val registered: Instant = Instant.now()) {
    constructor(name: String) : this(name, Instant.now()) {
        // optional constructor implementation may be added
    }
}

// Private constructors
class Person8 private constructor(val name: String)

// 'data' class generates hashCode(), equals(), toString(), copy() and componentN() functions
data class Person9 (val name: String, val registered: Instant = Instant.now())

fun show(persons: List<Person9>) {
    // Destructuring data objects
    for ((name, date) in persons)
        println(name + "'s registration date: " + date)

    for (person in persons) {
        println(person.component1() + "'s registration date: " + person.component2())
    }
}

fun main() {
    // Accessors and properties
    val person2 = Person4("Bob")
    println(person2.name)           // Calling the getter

    // comparing default toString() and toString() generated by data class
    println(person2)                // Person4@511baa65
    println(Person9("Bob"))   // Person9(name=Bob, registered=2019-07-10T01:59:39.894684Z)

    val persons = listOf(Person9("Mike"), Person9("Paul"))
    show(persons)
}
